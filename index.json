[{"authors":["admin"],"categories":null,"content":"Mark Edosa is a graduate of Optometry at the University of Benin, Nigeria. He is interested in the presentation of analytic solutions that work on multiple platforms.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1556867116,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"https://maqui7295.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"author","summary":"Mark Edosa is a graduate of Optometry at the University of Benin, Nigeria. He is interested in the presentation of analytic solutions that work on multiple platforms.","tags":null,"title":"Mark Edosa","type":"author"},{"authors":null,"categories":null,"content":"This page contains excerpts from what I\u0026rsquo;ve learned so far. Hopefully you\u0026rsquo;ll find it useful.\n","date":1536447600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1558488882,"objectID":"c3224f3a64174f08aaf31e1f1d16ffd3","permalink":"https://maqui7295.github.io/tutorial/","publishdate":"2018-09-09T00:00:00+01:00","relpermalink":"/tutorial/","section":"tutorial","summary":"This page contains excerpts from what I\u0026rsquo;ve learned so far. Hopefully you\u0026rsquo;ll find it useful.","tags":null,"title":"Overview","type":"docs"},{"authors":["Mark Edosa"],"categories":["r"],"content":"You are yet to see something special, this is just the beginning of my flow\nx = 1:10 y = x^3 plot(x, y)  ","date":1554940800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555975924,"objectID":"d06cdda2c9f3c33f29bd433ba7edd969","permalink":"https://maqui7295.github.io/post/test-post-created-by-me/","publishdate":"2019-04-11T00:00:00Z","relpermalink":"/post/test-post-created-by-me/","section":"post","summary":"You are yet to see something special, this is just the beginning of my flow\nx = 1:10 y = x^3 plot(x, y)  ","tags":["test"],"title":"test post created by me","type":"post"},{"authors":null,"categories":["commandline"],"content":" Git is a version control system (VCS) that is very useful for tracking content in files.\nDescription It has three areas:\n The working directory (working tree) - contains your files The staging area (or index) - a temporary storage for changes your files the repository - a somewhat permanent store for your files  The workflow:\n Initialize an empty git repository if it\u0026rsquo;s a new project or clone an existing repository Make changes to the content of files / create new files Add files to the index Commit the changes to the local repository And Optionally push to a remote repository hosted via sites such as github, bitbucket etc.  This tutorial provides quick methods for working with git:\nInstalling git  You can download and install git from here Also, you can download a gui client for git from here  Getting help git help git help -a # lists the Porcelain(low level) commands git help -g # lists the common git guides e.g git help tutorial # this opens up the documentation for the command in the default browser of your machine git help \u0026lt;command | concept\u0026gt; # e.g. git help init # useful tutorials git help everyday git help tutorial  Configuration git config --list # see all initial configurations in a local git repository git config --list --global # see all initial configurations # set global username and email git config --global user.name \u0026quot;your username\u0026quot; git config --global user.email youremail@something.com # set local or per git directory username and email git config user.name \u0026quot;your username\u0026quot; git config user.email youremail@something.com  Starting a new project On the working or root directory of the project, run the following commands:\ngit init # initialize a git repositot=ry git add filename1 # add a single file to the staging area git add filename1 filename2 # add multiple files to the staging area git add . # add all untracked files to the staging area git commit -m \u0026quot;the message to describe the commit\u0026quot;   To ignore files or folders, create a gitignore file\ntouch .gitignore  then add the files or folders you don\u0026rsquo;t want git to track in the .gitignore file\n  Pushing to github  Create a new repository on github At the project root i.e. the working directory, run:\ngit remote add origin url_of_repo  Make changes, add them to the index and commit them\n Run the command:\n git push -u origin master    The above \u0026ldquo;push\u0026rdquo; requires the use of password. A more secure option is the use of ssh   Generating ssh keys a. run\nssh-keygen -t rsa -b 4096 -C \u0026quot;example@mail.com\u0026quot;  Follow the prompt and make sure you write down the passphrase you used. At the end you should see a message similar to the one below:\n Your identification has been saved in /c/Users/YourUsername/.ssh/id_rsa. Your public key has been saved in /c/Users/YourUsername/.ssh/id_rsa.pub. The key fingerprint is: a-very-long-text-hashed-text\n b. Confirm that the ssh agent is running\neval \u0026quot;$(ssh-agent -s)\u0026quot; # prints out Agent pid process_id  c. Add the generated key to the ssh\nssh-add ~/.ssh/id_rsa  d. Registering the key on github\n go to settings on github click SSH and GPG keys click new SSH key give a title copy the ssh key from your device and paste in the box provided    for Mac users: pbcopy \u0026lt; ~/.ssh/id_rsa.pub (copies to the clipboard) for windows: clip \u0026lt; ~/.ssh/id_rsa.pub     Remember to delete the ssh key on github if you sell or lose your pc   Making and removing changes (Tracking files) # view the changes made to the content of files in the working directory git diff # view the changes between the working directory and the staged area (index) git diff --cached # unstaging files / removing changes from the index git rm --cached file # unstage the file (untrack the file) git rm --cached . -r # unstaged all staged files git reset HEAD test.js # unstaged a file # delete file git rm file # Resetting git reset --soft # move changes from .git to the staging area git reset --mixed # untrack (unstage) tracked files (default action) git reset --hard # Discard changes to tracked files in the working tree since last commit  Viewing the project history git status # know the current status git status -s # a shorter status git log # to see all your commits history git log -n # see a particular number n of commits git log --oneline # each commit is printed on a single line git log --stat # get some statistics git log --stat --summary git log --patch # get full details of exact changes made   Press q to exit the log console after reading the logs   Working with branches A branch is just a reference to a commit (stored in the refs folder in the .git directory).\n List branches\ngit branch # local only git branch -r # remote only git branch --all # all branches  Create new branch\ngit branch new-branch # create new branch git checkout -b new_branch # create and checkout new branch  Switch to new branch git checkout branchname\n Delete branch\ngit -d branchname  Merge branches\ngit merge other_branch git help merge # for more information git pull # fetch and merge a remote branch with the local one git push # merge the local branch with the remote branch   Rebasing This is another way of merging branches. but unlike git merge which produces a merged with 2 parents, rebase gives the two branches a common base hence the merged file has a single parent.\ngit checkout branchname (if not already in branch) git rebase new_branch  Choosing between rebasing and merging  Merging preserves history hence it is always truthful about the state of changes made to a file over time. However the history to track might be cumbersome especially in a large project that involved a lot of merges. Rebasing does not preserve history hence does not have the above problem however it lies since history is not preserved.   When in doubt, just merge. Never rebase shared commits    How does git know the current branch? cat .git/HEAD # contains a reference to the current branch\ncat .git/refs/heads/master # returns the sha1sum of the current commit git show-ref branchname # list the references or pointers to a branch    checking out a commit/ detaching the head (pointer) Detaching the head (switching into a commit) is useful for experimentation with your code.\n git checkout sha1sum_of_commit  Then do all you would normally: change files, add and commit them. Optionally, after changes are made to the commit you can put a branch on the commit by running\n git branch newbranch_for_commit  If you do not do this, the git garbage collector will remove the changes after some time\nNavigating directories  List the content of the directory\nls ls -a ls -al  Change directory\ncd cd name_of_directory  Make directories and files\nmkdir dirname # make a directory touch filename # creates a new file cp oldfilename newfilename # copy a file mv oldfilename newfilename # rename oldfilename to newfilename git mv filename1 filename2 # if in same dir, rename a file)   Git tags A tag is a reference to an object/commit/branch. Tags are useful for marking the current point in a project history.\nTypes:\n annotated tags\n git tag -a tagname  no specific name usually called non-annotated or lightweight tags\n git tag tagname   Contributing to projects on Github  Fork the project (original) to create a forked project. You can explore open source projects at this url https://github.com/explore Clone the forked version (belongs to you) to your local machine (local project).\ngit clone repo_url # public project # cloning a private repo git clone git@github.com:username/repo.git  Add the original project as a remote url to the local project, local project will then contain two remote branches- the master (forked project) and upstream (original project)\ngit remote set-url --add [--push] \u0026lt;name\u0026gt; \u0026lt;newurl\u0026gt;     You cannot put to upstream but can only pull from it. On github, you can only request changes to upstream or original project by submitting a \u0026ldquo;pull request\u0026rdquo;    Miscellaneous Print information about a particular commit / tag\n git cat-file \u0026lt;sha1sum\u0026gt; -t # sha1sum might be the hash of a file or a commit git cat-file sha1sum -p git cat-file mytag -p  Get the number and size of objects in a git repository git count-objects\n","date":1536447600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558618905,"objectID":"894a34a96b3c81c3bacd0f9cad05b833","permalink":"https://maqui7295.github.io/tutorial/git/","publishdate":"2018-09-09T00:00:00+01:00","relpermalink":"/tutorial/git/","section":"tutorial","summary":"Git is a version control system (VCS) that is very useful for tracking content in files.\nDescription It has three areas:\n The working directory (working tree) - contains your files The staging area (or index) - a temporary storage for changes your files the repository - a somewhat permanent store for your files  The workflow:\n Initialize an empty git repository if it\u0026rsquo;s a new project or clone an existing repository Make changes to the content of files / create new files Add files to the index Commit the changes to the local repository And Optionally push to a remote repository hosted via sites such as github, bitbucket etc.","tags":["commandline","git"],"title":"Working with git","type":"docs"},{"authors":null,"categories":null,"content":" Introduction NPM or node package manager is one of tool for managing dependencies of javascript or Nodejs projects.\nTypical workflow of an npm project git clone repo cd directory npm i npm start npm test  Getting help npm -h npm install -h npm help \u0026lt;command\u0026gt; # opens browser to the official help page e.g. npm help install npm help-search \u0026lt;list of words\u0026gt; e.g npm help-search remove npm api-help prune npm info pkg  Setting default configuration npm set init-author-name \u0026quot;name of author\u0026quot; npm set init-license \u0026quot;name of author\u0026quot; npm get init-author-name # delete a config npm config delete init-author-name   ls ~/.npmrc # see all options   Starting a new project npm init # follow the prompt npm init -y # same effect as above but faster  installing packages npm i \u0026lt;pkg\u0026gt; # same as npm i \u0026lt;pkg@latest\u0026gt; npm i \u0026lt;pkg\u0026gt; -S or --save npm i \u0026lt;pkg\u0026gt; -D or --save-dev npm i -g \u0026lt;globalpackage\u0026gt;  Installing a package from git npm i \u0026lt;git_repo_url\u0026gt; npm i \u0026lt;url\u0026gt; # from any other url  Installing from gist npm i gist:hash_from_url --save (gist url must have a pkg.json file\u0026gt;  Installing from a folder npm i path_to_folder  Listing installed packages npm list npm ls npm ll npm la npm list --depth 1 npm list --global npm list --global depth 0 npm list --depth 0 --long true npm list --depth 0 --json true npm list --depth 0 --parseable true npm list --depth 0 --dev true npm list --depth 0 --prod true  Installing specific versions NPM packages are semantically versioned i.e. major.minor.patch e.g. pkg1.8.3. Here one(1) is the major. eight(8) is the minor while three(3) is the patch.\n A revision or patch consists of a bug fix or performance improvement to the package A Minor change usually consists of new features but doesn\u0026rsquo;t break the existing functionality of the package A Major version is released when package updates or new features introduced break existing functionalities e.g. a change in API or definition of functions  Examples:\nnpm i \u0026lt;pkg@1.1.1\u0026gt;, npm i \u0026lt;pkg@1.1.x\u0026gt;, npm i \u0026lt;pkg@1.1\u0026gt;, npm i \u0026lt;pkg@1.x\u0026gt;, npm i \u0026lt;pkg@1\u0026gt; npm i \u0026lt;pkg@\u0026quot;\u0026gt;=1.1.0 \u0026lt; 1.4.0 || 1.2.x\u0026quot;\u0026gt; npm i \u0026lt;pkg@\u0026quot;\u0026lt;4\u0026quot;\u0026gt; npm i \u0026lt;pkg@\u0026quot;3\u0026quot;\u0026gt; npm i \u0026lt;pkg@\u0026quot;^1.7.4\u0026quot;\u0026gt; npm i --save # npm automatically updates to latest version npm i --save --save-exact \u0026lt;pkg@1.8.2\u0026gt; installs exact version: \u0026quot;1.8.2\u0026quot; no caret symbol caret(^) --- get the latest major release e.g. \u0026quot;^1.2.1\u0026quot; tilde(~) --- get the latest version of the minor release e.g. \u0026quot;~1.2.1\u0026quot; asterisks(*) or \u0026quot;*\u0026quot; e.g. \u0026quot;*\u0026quot; or \u0026quot;x\u0026quot; --- get the latest package.  Updating versions npm update # update all local pkgs npm update --dev # update devDependencies npm update --prod # update dependencies npm update \u0026lt;pkg\u0026gt; # update a single pkg npm update -g # be careful about this especially if you have much pkgs installed globally npm update -g \u0026lt;globalpkg\u0026gt; # update a single global package npm i npm@latest -g # with admin priviledges  Removing packages npm uninstall \u0026lt;pkg\u0026gt; npm uninstall \u0026lt;pkg\u0026gt; --save # both uninstalls and remove pkg from pkg.json file npm rm \u0026lt;pkg\u0026gt; npm r \u0026lt;pkg\u0026gt; npm un \u0026lt;pkg\u0026gt; npm rm \u0026lt;pkg\u0026gt; # add the -g flag to the above command to remove a global pkg npm prune # remove an extraneous pkg npm prune pkg # equivalent to npm rm pkg npm prune --production # remove all devDependencies  NPM registry registry.npmjs.org/\u0026lt;pkgname\u0026gt; # get info on pkgname in json format npm.im/pkg # takes you directly to the package url on npmjs.com npm search pkg npm repo pkg # the repo page of the pkg  Publishing an NPM package STEPS:\n create a user account on npmjs.com npm adduser # enter your username and password Prepare the project for publishing\na. git init b git add orin \u0026lt;url_git_repo? c. npm init d. git add . e. git commit -m \u0026quot;message\u0026quot; f. git push  Run npm publish. Check or verify the status of the package. npm info pkg or npm repo pkg or npm.im.pkg\n Tag the package: git tag \u0026lt;tag_id\u0026gt;\n git push --tags # this ensures that the npm version matches the source on github\u0026gt;\n  Publishing an update The steps are:\n Make changes then commit them as you would in a git project. Update the version either manually or via npm version \u0026lt;patch/minor/major\u0026gt; If npm version \u0026lt;patch/minor/major\u0026gt; command was used, npm automatically tags and commits the changes, then\na. git push --tags \u0026lt;tag-id\u0026gt; b. git push c. npm publish   Releasing a beta version  Manually change the version in the package.json \u0026ldquo;1.1.0-beta.0\u0026rdquo; # note the beta.n word Commit the changes Tag it with git e.g. git tag 1.1.0-beta.0 git push git push --tags npm publish --tag beta   Run npm i pkg@beta to install the beta version   ","date":1536447600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1558488882,"objectID":"337183b072cc00135440362e1a37af48","permalink":"https://maqui7295.github.io/tutorial/npm/","publishdate":"2018-09-09T00:00:00+01:00","relpermalink":"/tutorial/npm/","section":"tutorial","summary":"Introduction NPM or node package manager is one of tool for managing dependencies of javascript or Nodejs projects.\nTypical workflow of an npm project git clone repo cd directory npm i npm start npm test  Getting help npm -h npm install -h npm help \u0026lt;command\u0026gt; # opens browser to the official help page e.g. npm help install npm help-search \u0026lt;list of words\u0026gt; e.g npm help-search remove npm api-help prune npm info pkg  Setting default configuration npm set init-author-name \u0026quot;name of author\u0026quot; npm set init-license \u0026quot;name of author\u0026quot; npm get init-author-name # delete a config npm config delete init-author-name   ls ~/.","tags":["commandline","npm"],"title":"Working with NPM","type":"docs"},{"authors":null,"categories":null,"content":"","date":1461711600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556867116,"objectID":"1b3f323f51eadbd56de25cc82584a4cf","permalink":"https://maqui7295.github.io/project/react-starter/","publishdate":"2016-04-27T00:00:00+01:00","relpermalink":"/project/react-starter/","section":"project","summary":"A starter template for react applications","tags":["react"],"title":"React Starter","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461711600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556867116,"objectID":"69951e1cbf9dc1f7a068b497c69daf6b","permalink":"https://maqui7295.github.io/project/react-form/","publishdate":"2016-04-27T00:00:00+01:00","relpermalink":"/project/react-form/","section":"project","summary":"An example of using the in-built project page.","tags":["react"],"title":"React form","type":"project"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view \r Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555975924,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"https://maqui7295.github.io/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view \r Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555975924,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://maqui7295.github.io/slides/example/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]