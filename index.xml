<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mark Edosa</title>
    <link>https://maqui7295.github.io/</link>
    <description>Recent content on Mark Edosa</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Mark Edosa</copyright>
    <lastBuildDate>Thu, 11 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://maqui7295.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>test post created by me</title>
      <link>https://maqui7295.github.io/post/test-post-created-by-me/</link>
      <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://maqui7295.github.io/post/test-post-created-by-me/</guid>
      <description>&lt;p&gt;You are yet to see something special, this is just the beginning of my flow&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;x = 1:10
y = x^3
plot(x, y)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://maqui7295.github.io/post/2019-04-11-test-post-created-by-me_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with git</title>
      <link>https://maqui7295.github.io/tutorial/git/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0100</pubDate>
      
      <guid>https://maqui7295.github.io/tutorial/git/</guid>
      <description>

&lt;p&gt;Git is a version control system (VCS) that is very useful for tracking content in files.&lt;/p&gt;

&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;

&lt;p&gt;It has three areas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;working directory&lt;/code&gt; (working tree) - contains your files&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;staging area&lt;/code&gt; (or index) - a temporary storage for changes your files&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;repository&lt;/code&gt; - a somewhat permanent store for your files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The workflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Initialize&lt;/strong&gt; an empty git repository if it&amp;rsquo;s a new project or clone an existing repository&lt;/li&gt;
&lt;li&gt;Make changes to the content of files / create new files&lt;/li&gt;
&lt;li&gt;Add files to the index&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commit&lt;/strong&gt; the changes to the local repository&lt;/li&gt;
&lt;li&gt;And Optionally push to a remote repository hosted via sites such as github, bitbucket etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial provides quick methods for working with git:&lt;/p&gt;

&lt;h2 id=&#34;installing-git&#34;&gt;Installing git&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can download and install git from &lt;a href=&#34;https://git-scm.com/downloads&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Also, you can download a gui client for git from &lt;a href=&#34;https://git-scm.com/downloads/guis&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;getting-help&#34;&gt;Getting help&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git help  
git help -a  # lists the Porcelain(low level) commands
git help -g  # lists the common git guides e.g git help tutorial

# this opens up the documentation for the command in the default browser of your machine
git help &amp;lt;command | concept&amp;gt; # e.g. git help init

# useful tutorials
git help everyday  
git help tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --list # see all initial configurations in a local git repository
git config --list --global # see all initial configurations

# set global username and email
git config --global user.name &amp;quot;your username&amp;quot;
git config --global user.email youremail@something.com

# set local or per git directory username and email
git config user.name &amp;quot;your username&amp;quot;
git config user.email youremail@something.com

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;starting-a-new-project&#34;&gt;Starting a new project&lt;/h2&gt;

&lt;p&gt;On the working or root directory of the project, run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git init  # initialize a git repositot=ry
git add filename1            # add a single file to the staging area
git add filename1 filename2  # add multiple files to the staging area
git add .                    # add all untracked files to the staging area
git commit -m &amp;quot;the message to describe the commit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;To ignore files or folders, create a gitignore file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;touch .gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then add the files or folders you don&amp;rsquo;t want git to track in the .gitignore file&lt;/p&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;pushing-to-github&#34;&gt;Pushing to github&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Create a new repository on &lt;a href=&#34;https://github.com&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At the project root i.e. the working directory, run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add origin url_of_repo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make changes, add them to the index and commit them&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The above &amp;ldquo;push&amp;rdquo; requires the use of password. A more secure option is the use of ssh
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;generating-ssh-keys&#34;&gt;Generating ssh keys&lt;/h2&gt;

&lt;p&gt;a. run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; ssh-keygen -t rsa -b 4096 -C &amp;quot;example@mail.com&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Follow the prompt and make sure you write down the passphrase you used. At the end you should see a message similar to the one below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Your identification has been saved in /c/Users/YourUsername/.ssh/id_rsa.
Your public key has been saved in /c/Users/YourUsername/.ssh/id_rsa.pub.
The key fingerprint is: a-very-long-text-hashed-text&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;b. Confirm that the ssh agent is running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    eval &amp;quot;$(ssh-agent -s)&amp;quot;  # prints out Agent pid process_id
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c. Add the generated key to the ssh&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    ssh-add ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;d. Registering the key on github&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;go to settings on github&lt;/li&gt;
&lt;li&gt;click SSH and GPG keys&lt;/li&gt;
&lt;li&gt;click new SSH key&lt;/li&gt;
&lt;li&gt;give a title&lt;/li&gt;
&lt;li&gt;copy the ssh key from your device and paste in the box provided&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;for Mac users: &lt;code&gt;pbcopy &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt; (copies to the clipboard)&lt;/li&gt;
&lt;li&gt;for windows: &lt;code&gt;clip &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Remember to delete the ssh key on github if you sell or lose your pc
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;making-and-removing-changes-tracking-files&#34;&gt;Making and removing changes (Tracking files)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# view the changes made to the content of files in the working directory
git diff

# view the changes between the working directory and the staged area (index)
git diff --cached

# unstaging files / removing changes from the index
git rm --cached file      # unstage the file (untrack the file)
git rm --cached . -r      # unstaged all staged files
git reset HEAD test.js    # unstaged a file

# delete file
git rm file

# Resetting
git reset --soft    # move changes from .git to the staging area
git reset --mixed   # untrack (unstage) tracked files (default action)
git reset --hard    # Discard changes to tracked files in the working tree since last commit
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;viewing-the-project-history&#34;&gt;Viewing the project history&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git status         # know the current status
git status -s      # a shorter status
git log            #  to see all your commits history
git log -n         # see a particular number n of commits
git log --oneline  # each commit is printed on a single line
git log --stat     # get some statistics
git log --stat --summary
git log --patch # get full details of exact changes made
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Press q to exit the log console after reading the logs
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;working-with-branches&#34;&gt;Working with branches&lt;/h2&gt;

&lt;p&gt;A branch is just a reference to a commit (stored in the refs folder in the .git directory).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;List branches&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch        # local only
git branch -r     # remote only
git branch --all  # all branches
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create new branch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch new-branch   # create new branch
git checkout -b new_branch # create and checkout new branch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Switch to new branch
    git checkout branchname&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Delete branch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git -d branchname
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Merge branches&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git merge other_branch
git help merge # for more information

git pull  # fetch and merge a remote branch with the local one

git push  # merge the local branch with the remote branch
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rebasing&#34;&gt;Rebasing&lt;/h2&gt;

&lt;p&gt;This is another way of merging branches. but unlike &lt;code&gt;git merge&lt;/code&gt; which produces a merged with 2 parents, rebase gives the two branches a common base hence the merged file has a single parent.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout branchname (if not already in branch)
git rebase new_branch
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;choosing-between-rebasing-and-merging&#34;&gt;Choosing between rebasing and merging&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Merging&lt;/code&gt; preserves history hence it is always truthful about the state of changes made to a file over time.&lt;/li&gt;
&lt;li&gt;However the history to track might be cumbersome especially in a large project that involved a lot of merges.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rebasing&lt;/code&gt; does not preserve history hence does not have the above problem&lt;/li&gt;
&lt;li&gt;however it lies since history is not preserved.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    When in doubt, just merge. Never rebase shared commits
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;How does git know the current branch?
    cat .git/HEAD  # contains a reference to the current branch&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat .git/refs/heads/master   # returns the sha1sum of the current commit

git show-ref branchname     # list the references or pointers to a branch
&lt;/code&gt;&lt;/pre&gt;

  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;checking-out-a-commit-detaching-the-head-pointer&#34;&gt;checking out a commit/ detaching the head (pointer)&lt;/h2&gt;

&lt;p&gt;Detaching the head &lt;strong&gt;(switching into a commit)&lt;/strong&gt; is useful for experimentation with your code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    git checkout sha1sum_of_commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then do all you would normally: change files, add and commit them. Optionally, after changes are made to the commit you can put a branch on the commit by running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    git branch newbranch_for_commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do not do this, the git garbage collector will remove the changes after some time&lt;/p&gt;

&lt;h2 id=&#34;navigating-directories&#34;&gt;Navigating directories&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;List the content of the directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls
ls -a
ls -al
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Change directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd
cd name_of_directory
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make directories and files&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir dirname                  # make a directory
touch filename                 # creates a new file
cp oldfilename newfilename      # copy a file
mv oldfilename newfilename     # rename oldfilename to newfilename
git mv filename1 filename2     # if in same dir, rename a file)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;git-tags&#34;&gt;Git tags&lt;/h2&gt;

&lt;p&gt;A tag is a reference to an object/commit/branch. Tags are useful for marking the current point in a project history.&lt;/p&gt;

&lt;p&gt;Types:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;annotated tags&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    git tag -a tagname
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;no specific name usually called &lt;code&gt;non-annotated&lt;/code&gt; or &lt;code&gt;lightweight&lt;/code&gt; tags&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    git tag tagname
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;contributing-to-projects-on-github&#34;&gt;Contributing to projects on Github&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Fork&lt;/code&gt; the project (original) to create a forked project. You can explore open source projects at this url &lt;a href=&#34;https://github.com/explore&#34; target=&#34;_blank&#34;&gt;https://github.com/explore&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Clone&lt;/code&gt; the forked version (belongs to you) to your local machine (local project).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone repo_url  # public project
# cloning a private repo
git clone git@github.com:username/repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Add&lt;/code&gt; the original project as a remote url to the local project, local project will then contain two remote branches- the &lt;code&gt;master&lt;/code&gt; (forked project) and &lt;code&gt;upstream&lt;/code&gt; (original project)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote set-url --add [--push] &amp;lt;name&amp;gt; &amp;lt;newurl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;You cannot put to upstream but can only pull from it.&lt;/li&gt;
&lt;li&gt;On github, you can only request changes to upstream or original project by submitting a &amp;ldquo;pull request&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h2&gt;

&lt;p&gt;Print information about a particular commit / tag&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    git cat-file &amp;lt;sha1sum&amp;gt; -t  # sha1sum might be the hash of a file or a commit
    git cat-file sha1sum -p

    git cat-file mytag -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get the number and size of objects in a git repository
        git count-objects&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working with NPM</title>
      <link>https://maqui7295.github.io/tutorial/npm/</link>
      <pubDate>Sun, 09 Sep 2018 00:00:00 +0100</pubDate>
      
      <guid>https://maqui7295.github.io/tutorial/npm/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;NPM or node package manager is one of tool for managing dependencies of javascript or Nodejs projects.&lt;/p&gt;

&lt;h2 id=&#34;typical-workflow-of-an-npm-project&#34;&gt;Typical workflow of an npm project&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;git clone repo
cd directory
npm i
npm start
npm test
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-help&#34;&gt;Getting help&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm -h
npm install -h
npm help &amp;lt;command&amp;gt; # opens browser to the official help page e.g. npm help install
npm help-search &amp;lt;list of words&amp;gt;  e.g npm help-search remove
npm api-help prune
npm info pkg
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setting-default-configuration&#34;&gt;Setting default configuration&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm set init-author-name &amp;quot;name of author&amp;quot;
npm set init-license &amp;quot;name of author&amp;quot;
npm get init-author-name
# delete a config
npm config delete init-author-name
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    ls ~/.npmrc # see all options
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;starting-a-new-project&#34;&gt;Starting a new project&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm init # follow the prompt
npm init -y  # same effect as above but faster
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-packages&#34;&gt;installing packages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm i &amp;lt;pkg&amp;gt;  # same as npm i &amp;lt;pkg@latest&amp;gt;
npm i &amp;lt;pkg&amp;gt; -S or --save
npm i &amp;lt;pkg&amp;gt; -D or --save-dev
npm i -g &amp;lt;globalpackage&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-a-package-from-git&#34;&gt;Installing a package from git&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm i &amp;lt;git_repo_url&amp;gt;
npm i &amp;lt;url&amp;gt; # from any other url
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-from-gist&#34;&gt;Installing from gist&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm i gist:hash_from_url --save (gist url must have a pkg.json file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-from-a-folder&#34;&gt;Installing from a folder&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm i path_to_folder
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;listing-installed-packages&#34;&gt;Listing installed packages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm list  
npm ls
npm ll
npm la
npm list --depth 1
npm list --global
npm list --global depth 0
npm list --depth 0 --long true
npm list --depth 0 --json true
npm list --depth 0 --parseable true
npm list --depth 0 --dev true
npm list --depth 0 --prod true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;installing-specific-versions&#34;&gt;Installing specific versions&lt;/h2&gt;

&lt;p&gt;NPM packages are semantically versioned i.e. major.minor.patch e.g. pkg1.8.3. Here one(1) is the major. eight(8) is the minor while three(3) is the patch.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A revision or &lt;code&gt;patch&lt;/code&gt; consists of a bug fix or performance improvement to the package&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Minor&lt;/code&gt; change usually consists of &lt;strong&gt;new&lt;/strong&gt; features but doesn&amp;rsquo;t break the existing functionality of the package&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Major&lt;/code&gt; version is released when package updates or new features introduced break existing functionalities e.g. a change in API or definition of functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i &amp;lt;pkg@1.1.1&amp;gt;, npm i &amp;lt;pkg@1.1.x&amp;gt;, npm i &amp;lt;pkg@1.1&amp;gt;, npm i &amp;lt;pkg@1.x&amp;gt;, npm i &amp;lt;pkg@1&amp;gt;

npm i &amp;lt;pkg@&amp;quot;&amp;gt;=1.1.0 &amp;lt; 1.4.0 || 1.2.x&amp;quot;&amp;gt;
npm i &amp;lt;pkg@&amp;quot;&amp;lt;4&amp;quot;&amp;gt;
npm i &amp;lt;pkg@&amp;quot;3&amp;quot;&amp;gt;

npm i &amp;lt;pkg@&amp;quot;^1.7.4&amp;quot;&amp;gt;

npm i --save # npm automatically updates to latest version

npm i --save --save-exact &amp;lt;pkg@1.8.2&amp;gt; installs exact version:  &amp;quot;1.8.2&amp;quot; no caret symbol 

caret(^) --- get the latest major release e.g. &amp;quot;^1.2.1&amp;quot;
tilde(~) --- get the latest version of the minor release e.g. &amp;quot;~1.2.1&amp;quot;

asterisks(*) or &amp;quot;*&amp;quot; e.g. &amp;quot;*&amp;quot; or &amp;quot;x&amp;quot; --- get the latest package.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;updating-versions&#34;&gt;Updating versions&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm update   # update all local pkgs
npm update --dev  # update devDependencies
npm update --prod  # update dependencies
npm update &amp;lt;pkg&amp;gt; # update a single pkg
npm update -g  # be careful about this especially if you have much pkgs installed globally
npm update -g &amp;lt;globalpkg&amp;gt; # update a single global package

npm i npm@latest -g # with admin priviledges
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;removing-packages&#34;&gt;Removing packages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm uninstall &amp;lt;pkg&amp;gt;
npm uninstall &amp;lt;pkg&amp;gt; --save # both uninstalls and remove pkg from pkg.json file
npm rm &amp;lt;pkg&amp;gt;
npm r &amp;lt;pkg&amp;gt;
npm un &amp;lt;pkg&amp;gt;
npm rm &amp;lt;pkg&amp;gt;
# add the -g flag to the above command to remove a global pkg

npm prune # remove an extraneous pkg
npm prune pkg  # equivalent to npm rm pkg
npm prune --production  # remove all devDependencies
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;npm-registry&#34;&gt;NPM registry&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;registry.npmjs.org/&amp;lt;pkgname&amp;gt;  # get info on pkgname in json format

npm.im/pkg   # takes you directly to the package url on npmjs.com

npm search pkg

npm repo pkg  # the repo page of the pkg
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;publishing-an-npm-package&#34;&gt;Publishing an NPM package&lt;/h2&gt;

&lt;p&gt;STEPS:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a user account on npmjs.com&lt;/li&gt;
&lt;li&gt;npm adduser   # enter your username and password&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Prepare the project for publishing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a. git init
b  git add orin &amp;lt;url_git_repo?
c. npm init
d. git add .
e. git commit -m &amp;quot;message&amp;quot;
f. git push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;npm publish&lt;/code&gt;. Check or verify the status of the package. &lt;code&gt;npm info pkg&lt;/code&gt; or &lt;code&gt;npm repo pkg&lt;/code&gt; or &lt;code&gt;npm.im.pkg&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tag the package: &lt;code&gt;git tag &amp;lt;tag_id&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;git push --tags&lt;/code&gt;   # this ensures that the npm version matches the source on github&amp;gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;publishing-an-update&#34;&gt;Publishing an update&lt;/h2&gt;

&lt;p&gt;The steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make changes then commit them as you would in a git project.&lt;/li&gt;
&lt;li&gt;Update the version either manually or via &lt;code&gt;npm version &amp;lt;patch/minor/major&amp;gt;&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If npm version &lt;code&gt;&amp;lt;patch/minor/major&amp;gt;&lt;/code&gt; command was used, npm automatically tags and commits the changes, then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a. git push --tags &amp;lt;tag-id&amp;gt;
b. git push
c. npm publish
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;releasing-a-beta-version&#34;&gt;Releasing a beta version&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Manually change the version in the package.json  &amp;ldquo;1.1.0-beta.0&amp;rdquo;  # note the beta.n word&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commit&lt;/strong&gt; the changes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tag&lt;/strong&gt; it with git  e.g. &lt;code&gt;git tag 1.1.0-beta.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --tags&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm publish --tag beta&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Run npm i pkg@beta to install the beta version
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>React Starter</title>
      <link>https://maqui7295.github.io/project/react-starter/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0100</pubDate>
      
      <guid>https://maqui7295.github.io/project/react-starter/</guid>
      <description></description>
    </item>
    
    <item>
      <title>React form</title>
      <link>https://maqui7295.github.io/project/react-form/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0100</pubDate>
      
      <guid>https://maqui7295.github.io/project/react-form/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://maqui7295.github.io/slides/example-slides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maqui7295.github.io/slides/example-slides/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-slides&#34;&gt;Welcome to Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
   One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://maqui7295.github.io/slides/example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maqui7295.github.io/slides/example/</guid>
      <description>

&lt;h1 id=&#34;welcome-to-slides&#34;&gt;Welcome to Slides&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;

&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Code block:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;

&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;

&lt;p&gt;Block math:&lt;/p&gt;

&lt;p&gt;$$
f\left( x \right) = \;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;

&lt;p&gt;Make content appear incrementally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;fragment &#34; &gt;
   One
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   &lt;strong&gt;Two&lt;/strong&gt;
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three
&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;

&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;

&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;
&lt;/aside&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;


&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/img/boards.jpg&#34;
  &gt;


&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;

&lt;p&gt;Customize the slide style and background&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/img/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/&#34; target=&#34;_blank&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
